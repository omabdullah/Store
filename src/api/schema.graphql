
interface Node {
    id: ID!
}

type PageInfo {
    hasNextPage: Boolean!
    hasPreviousPage: Boolean!
    startCursor: String
    endCursor: String
}
type Category {
    id: ID
    name: String
    products: [ Products ]
}

type ProductConnection {
    pageInfo: PageInfo,
    edges: [ ProductEdge ]
}
type ProductEdge {
    node: Product
    cursor: String!
}

type Product {
    product_id: Int
    brand: String
    name: String
    description: String
    price: Float
    threshold: Int
    quantity: Int
}


type Customer {
    customer_id: Int
    first_name: String
    last_name: String
    account_name: String
    account_password: String
    address: String
    city: String
    state: String
    zip_code: String
    phone_number: String
    email_address: String
    is_manager: Boolean
    is_employee: Boolean
} 

type Admin {
    id: ID
    user_name: String
    password: String
    first_name: String
    last_name: String
    role: Admin_Role
    status: Admin_Status
}

enum Admin_Status {
    ACTIVE
    SUSPENDED
    TERMINATED
}

enum Admin_Role {
    SUPERVISOR
    EMPLOYEE
}

enum Payment_Method {
    CASH
    CARD
}

type Transaction {
    id: ID
    products: [ Product ]
    payment_method: Payment_Method
    card_number: String
    total_cost: Float
    employee: Employee
    address: String
    coupon_code: String
}

type Payment {
    id: ID
    transaction_id: ID
    method: Payment_Method
    
}

type Query {
    node ( id: ID! ): Node
    product( product_id: ID ): Product
    productList ( first: Int ): ProductConnection
}

type Mutation {
    signUp ( input: SignUpInput! ): SignUpPayload!
    login ( input: LoginInput! ): LoginPayload!
}

input SignUpInput {
    Cus_Fname: String
    Cus_Lname: String
    Cus_accName: String
    Cus_accPass: String
    Cus_address: String
    Cus_city: String
    Cus_state: String
    Cus_zipCode: String
    Cus_phone: String
    Cus_email: String
    clientMutationId: String
}
type SignUpPayload {
    customer: Customer!
}

input LoginInput {
    Cus_accName: String
    Cus_accPass: String
    clientMutationId: String
}
type LoginPayload {
    customer: Customer!
}

input AddProductInput {
  name: String!
  clientMutationId: String
}

type AddTodoPayload {
  name: String!
  clientMutationId: String
}

schema {
    query: Query
    mutation: Mutation
}
